from typing import List, Union, Tuple, Optional

from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from app.keyboards.lexicon import MainMenu, ActionButtons

# --- Reply Keyboards (–æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞) ---

def main_menu_kb() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    buttons = [
        [KeyboardButton(text=MainMenu.BLOG)],
        [KeyboardButton(text=MainMenu.PARTNERS)],
        [KeyboardButton(text=MainMenu.ADS)],
        [KeyboardButton(text=MainMenu.INTERACTIVITY)],
        [KeyboardButton(text=MainMenu.ABOUT)]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def cancel_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=ActionButtons.CANCEL)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )


# --- Inline Keyboards (–∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏) ---

def blog_categories_kb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ —Ä—É–±—Ä–∏–∫ –±–ª–æ–≥–∞"""
    categories = [
        ("–ö–æ—Ç–æ–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è üß†", "blog_psychology"),
        ("–ö–æ—Ç–æ–í—ã—Å—Ç–∞–≤–∫–∏ üéâ", "blog_exhibitions"),
        ("–ö–æ—Ç–æ–ü–∏—Ç–∞–Ω–∏–µ üçΩ", "blog_nutrition"),
        ("–ö–æ—Ç–æ–ó–¥–æ—Ä–æ–≤—å–µ üè•", "blog_health")
    ]

    buttons = [
        [InlineKeyboardButton(text=text, callback_data=data)]
        for text, data in categories
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def pagination_kb(
        current_page: int,
        total_pages: int,
        prefix: str
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    buttons = []

    if current_page > 1:
        buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"{prefix}_prev_{current_page}"
            )
        )

    if current_page < total_pages:
        print(f"{prefix}_next_{current_page}")
        buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
                callback_data=f"{prefix}_next_{current_page}"
            )
        )

    return InlineKeyboardMarkup(inline_keyboard=[buttons])


# def confirm_post_kb(post_id: int) -> InlineKeyboardMarkup:
#     """–ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
#     return InlineKeyboardMarkup(
#         inline_keyboard=[
#             [
#                 InlineKeyboardButton(
#                     text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
#                     callback_data=f"mod_approve_{post_id}"
#                 ),
#                 InlineKeyboardButton(
#                     text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
#                     callback_data=f"mod_reject_{post_id}"
#                 )
#             ],
#             [
#                 InlineKeyboardButton(
#                     text="‚õî –ó–∞–±–∞–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∞",
#                     callback_data=f"mod_ban_{post_id}"
#                 )
#             ]
#         ]
#     )


def partner_offers_kb(offers: List[Tuple[str, str]]) -> InlineKeyboardMarkup:
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    buttons = [
        [InlineKeyboardButton(text=name, url=link)]
        for name, link in offers
    ]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="partners_back")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª–∏ ---

def build_inline_kb(
        buttons: List[Union[Tuple[str, str], List[Tuple[str, str]]]],
        row_width: int = 2
) -> InlineKeyboardMarkup:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä

    :param buttons: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [(—Ç–µ–∫—Å—Ç, callback_data)]
                    –∏–ª–∏ [[(—Ç–µ–∫—Å—Ç, callback_data)]] –¥–ª—è —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è —Ä—è–¥–æ–≤
    :param row_width: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã —è–≤–Ω—ã–µ —Ä—è–¥—ã)
    :return: –ì–æ—Ç–æ–≤—ã–π InlineKeyboardMarkup
    """
    keyboard = []

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≥–æ—Ç–æ–≤—ã–µ —Ä—è–¥—ã
    if buttons and isinstance(buttons[0], list):
        keyboard = [
            [InlineKeyboardButton(text=text, callback_data=data) for text, data in row]
            for row in buttons
        ]
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä—è–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        row = []
        for text, data in buttons:
            row.append(InlineKeyboardButton(text=text, callback_data=data))
            if len(row) >= row_width:
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—è
example_kb = build_inline_kb(
    buttons=[
        ("–ö–Ω–æ–ø–∫–∞ 1", "btn1"),
        ("–ö–Ω–æ–ø–∫–∞ 2", "btn2"),
        ("–ö–Ω–æ–ø–∫–∞ 3", "btn3"),
        ("–ö–Ω–æ–ø–∫–∞ 4", "btn4")
    ],
    row_width=2
)