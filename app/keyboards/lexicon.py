from enum import StrEnum, Enum
from typing import List, Optional
from pydantic import BaseModel, field_validator, Field

from utils.parsers import TextParser


class Button(BaseModel):
    name: str

class CallbackButton(Button):
    callback: str = Field(..., description="callback data")

class TagButton(Button):
    tag: str = Field(..., description="–¢—ç–≥ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –∏–∑ –±–¥")

    @field_validator('tag', mode='after')
    @classmethod
    def tag_validate(cls, tag: str) -> str:
        if not tag:
            raise ValueError('–ü–æ–ª–µ Tag –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return TextParser.tag_normalize(tag)


class AdsButton(CallbackButton):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã"""


class InteractivesButton(CallbackButton):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω –º–µ–Ω—é"""


class CatGenders(Enum):
    MALE = '–ú–∞–ª—å—á–∏–∫'
    FEMALE = '–î–µ–≤–æ—á–∫–∞'

    @classmethod
    def get_values(cls) -> set[str]:
        return {gender.value for gender in cls}

    @classmethod
    def get_gender(self, gender_name: str) -> 'CatGenders':
        genders_dict = {gender.value: gender for gender in self}
        return genders_dict[gender_name]


class MainMenu(Enum):
    BLOG = Button(name="üêæ –ë–ª–æ–≥ (—Ä—É–±—Ä–∏–∫–∏)")
    PARTNERS = Button(name="üõç –ü–∞—Ä—Ç–Ω—ë—Ä—ã –∏ –º–∞–≥–∞–∑–∏–Ω—ã")
    ADS = Button(name="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è (–∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å)")
    INTERACTIVES = Button(name="üéâ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—ã (–∫–æ–Ω–∫—É—Ä—Å—ã)")
    ABOUT = Button(name="‚ÑπÔ∏è –û –∫–∞–Ω–∞–ª–µ")
    ADMIN = Button(name="üë®üèª‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è")


class AdsMenu(Enum):
    GET_REFERRAL = AdsButton(name='–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É', callback='get_referral')
    DONATE = AdsButton(name='–û–ø–ª–∞—Ç–∏—Ç—å', callback='donate')

class AdsUserApprove(Enum):
    TO_MODERATE = Button(name='‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')
    REPEAT = Button(name='‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ')


class ActionButtons(Enum):
    CANCEL = Button(name="‚ùå –û—Ç–º–µ–Ω–∞" )
    BACK = Button(name="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    NEXT_PAGE = Button(name="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è")
    PREV_PAGE = Button(name="‚óÄÔ∏è –ù–∞–∑–∞–¥")
    APPROVE = Button(name="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å")
    REJECT = Button(name="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")
    BANE = Button(name="‚õî –ó–∞–±–∞–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∞")
    MAIN_MENU = Button(name="–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é")
    USER_JOIN = Button(name="–Ø –≤—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—É")



class KeyboardBlog(Enum):
    BLOG_PSYCHOLOGY = TagButton(name='–ö–æ—Ç–æ–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è üß†', tag='#–ö–æ—Ç–æ–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è')
    BLOG_EXHIBITIONS = TagButton(name='–ö–æ—Ç–æ–í—ã—Å—Ç–∞–≤–∫–∏ üéâ',tag='#–ö–æ—Ç–æ–í—ã—Å—Ç–∞–≤–∫–∏')
    BLOG_NUTRITION = TagButton(name='–ö–æ—Ç–æ–ü–∏—Ç–∞–Ω–∏–µ üçΩ', tag='#–ö–æ—Ç–æ–ü–∏—Ç–∞–Ω–∏–µ')
    BLOG_HEALTH = TagButton(name='–ö–æ—Ç–æ–ó–¥–æ—Ä–æ–≤—å–µ üè•', tag='#–ö–æ—Ç–æ–ó–¥–æ—Ä–æ–≤—å–µ')

# ADMIN
class AdminMenu(Enum):
    ADD_INTERACTIVES = Button(name='–°–æ–∑–¥–∞—Ç—å –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤')
    PARSE_POSTS =  Button(name='–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã')
    UPDATE_USERS =  Button(name='–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

class AdminInteractives(Enum):
    POLL = InteractivesButton(name='–°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', callback='poll')
    QUIZ = InteractivesButton(name="–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback='quiz')
    COMPETITIONS = InteractivesButton(name="–°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback='competitions')
