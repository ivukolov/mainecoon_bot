from enum import StrEnum, Enum
from typing import List, Optional
from pydantic import BaseModel, field_validator, Field

from utils.parsers import TextParser


class Button(BaseModel):
    name: str


class TagButton(Button):
    tag: str = Field(..., description="–¢—ç–≥ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –∏–∑ –±–¥")

    @field_validator('tag', mode='after')
    @classmethod
    def tag_validate(cls, tag: str) -> str:
        if not tag:
            raise ValueError('–ü–æ–ª–µ Tag –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return TextParser.tag_normalize(tag)





class MainMenu(Enum):
    BLOG = Button(name="üêæ –ë–ª–æ–≥ (—Ä—É–±—Ä–∏–∫–∏)")
    PARTNERS = Button(name="üõç –ü–∞—Ä—Ç–Ω—ë—Ä—ã –∏ –º–∞–≥–∞–∑–∏–Ω—ã")
    ADS = Button(name="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è (–∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å)")
    INTERACTIVITY = Button(name="üéâ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—ã (–∫–æ–Ω–∫—É—Ä—Å—ã)")
    ABOUT = Button(name="‚ÑπÔ∏è –û –∫–∞–Ω–∞–ª–µ")
    ADMIN = Button(name="üë®üèª‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è")


class AdminMenu(StrEnum):
    CHEK_POSTS = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ'
    PARSE_POSTS = '–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã'
    ADD_NEW_POSTS = '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã'
    UPDATE_USERS = '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'


class ActionButtons(StrEnum):
    CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"
    BACK = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    NEXT_PAGE = "–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è"
    PREV_PAGE = "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    APPROVE = "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å"
    REJECT = "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"
    BANE = "‚õî –ó–∞–±–∞–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∞"
    MAIN_MENU = "–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é"
    USER_JOIN = "–Ø –≤—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—É"



class KeyboardBlog(Enum):
    BLOG_PSYCHOLOGY = TagButton(name='–ö–æ—Ç–æ–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è üß†', tag='#–ö–æ—Ç–æ–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è')
    BLOG_EXHIBITIONS = TagButton(name='–ö–æ—Ç–æ–í—ã—Å—Ç–∞–≤–∫–∏ üéâ',tag='#–ö–æ—Ç–æ–í—ã—Å—Ç–∞–≤–∫–∏')
    BLOG_NUTRITION = TagButton(name='–ö–æ—Ç–æ–ü–∏—Ç–∞–Ω–∏–µ üçΩ', tag='#–ö–æ—Ç–æ–ü–∏—Ç–∞–Ω–∏–µ')
    BLOG_HEALTH = TagButton(name='–ö–æ—Ç–æ–ó–¥–æ—Ä–æ–≤—å–µ üè•', tag='#–ö–æ—Ç–æ–ó–¥–æ—Ä–æ–≤—å–µ')


# class KeyboardBlog(StrEnum):
#     BLOG_PSYCHOLOGY_BTN = '–ö–æ—Ç–æ–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è üß†'
#     BLOG_PSYCHOLOGY_TAG = '#–ö–æ—Ç–æ–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è'
#     BLOG_PSYCHOLOGY_CALLBACK = 'blog_psychology'
#
#     BLOG_EXHIBITIONS_BTN = '–ö–æ—Ç–æ–í—ã—Å—Ç–∞–≤–∫–∏ üéâ'
#     BLOG_EXHIBITIONS_TAG = '#–ö–æ—Ç–æ–í—ã—Å—Ç–∞–≤–∫–∏'
#     BLOG_EXHIBITIONS_CALLBACK = 'blog_exhibitions'
#
#     BLOG_NUTRITION_BTN = '–ö–æ—Ç–æ–ü–∏—Ç–∞–Ω–∏–µ üçΩ'
#     BLOG_NUTRITION_TAG = '#–ö–æ—Ç–æ–ü–∏—Ç–∞–Ω–∏–µ'
#     BLOG_NUTRITION_CALLBACK = 'blog_nutrition'
#
#     BLOG_HEALTH_BTN = '–ö–æ—Ç–æ–ó–¥–æ—Ä–æ–≤—å–µ üè•'
#     BLOG_HEALTH_TAG = '#–ö–æ—Ç–æ–ó–¥–æ—Ä–æ–≤—å–µ'
#     BLOG_HEALTH_CALLBACK = 'blog_health'
#
#     @classmethod
#     def get_callback_list(cls):
#         callback_list: List = []
#         for name, member in cls.__members__.items():
#             if name.endswith("_CALLBACK"):
#                 callback_list.append(member.value)
#         return callback_list
