import typing as t
from logging import getLogger

from aiogram.fsm.context import FSMContext
from sqlalchemy import delete
from telethon import TelegramClient
from telethon import types
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.enums import ChatAction
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession

from database.blog.enums import AdStatus
from keyboards.main_menu import blog_categories_kb, main_menu_kb, cancel_kb

from database import Post, CatAd
from keyboards.admin_menu import admin_tools_menu_kb, maike_interactives_kb
from keyboards.lexicon import MainMenu, KeyboardBlog, AdminMenu, AdminInteractives, ActionButtons
from keyboards.ads import ModerateAd
from database.users.models import User
from services.ads import CatAdsService
from states.admin import AdminModerateStates
from utils.decorators import admin_required
from mappers.telegram import TelegramMessageMapper, TelegramUserMapper
from schemas.dto import TelegramMessagesListDTO
from services.messages import MessagesService
from config import settings

logger = getLogger(__name__)
logger.info(f'–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä {__name__}')

admin_router = Router()


@admin_router.message(F.text == MainMenu.ADMIN.value.name)
@admin_required
async def admin_menu(message: Message, tg_user: User):
    chat = await message.bot.get_chat(settings.CHANNEL_ID)
    members_count = await message.bot.get_chat_member_count(settings.CHANNEL_ID)
    response = (
        f"–û –≤–µ–ª–∏–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n "
        f"üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ: {members_count}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
        f"ID: {chat.id}\n"
        f"–¢–∏–ø: {chat.type}\n"
        f"Username: @{chat.username if chat.username else '–ù–µ—Ç'}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {chat.description[:100] + '...' if chat.description and len(chat.description) > 100 else chat.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )
    await message.answer(response, reply_markup=admin_tools_menu_kb())


@admin_router.message(F.text == AdminMenu.ADD_INTERACTIVES.value.name)
@admin_required
async def admin_menu_make_interactives(message: Message, db: AsyncSession, tg_user: User):
    return await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–∞', reply_markup=maike_interactives_kb())


@admin_router.message(F.text == AdminMenu.PARSE_POSTS.value.name)
@admin_required
async def admin_menu_parse_posts(message: Message, db: AsyncSession, teleton_client: TelegramClient, tg_user: User):
    channel = await teleton_client.get_entity(settings.CHANNEL_ID)
    await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    logger.info('–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏ —Ç—ç–≥–æ–≤')
    parsed_messages = [m async for m in teleton_client.iter_messages(
        channel,
        limit=None,
    )]
    logger.info(f'–ò–∑ –∫–∞–Ω–∞–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(parsed_messages)} –ø–æ—Å—Ç–æ–≤, –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ')
    service = MessagesService(session=db, messages=parsed_messages, is_aiogram=False)
    try:
        await service.service_and_save_messages()
    except Exception as e:
        logger.error(e, exc_info=True)
        return await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã {e}", reply_markup=admin_tools_menu_kb())
    logger.info('–í—Å–µ –ø–æ—Å—Ç—ã –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ')
    return await message.answer(f"–í—Å–µ –ø–æ—Å—Ç—ã –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ!", reply_markup=admin_tools_menu_kb())


@admin_router.message(F.text == AdminMenu.UPDATE_USERS.value.name)
@admin_required
async def admin_menu_add_new_posts(message: Message, db: AsyncSession, teleton_client: TelegramClient, tg_user: User):
    # –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    channel = await teleton_client.get_entity(settings.CHANNEL_ID)  # –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    chat = await teleton_client.get_permissions(channel, await teleton_client.get_me())
    if not chat.is_admin:
        return await message.answer(
            f"‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö!",
            reply_markup=admin_tools_menu_kb()
        )
    parsed_users = [u async for u in teleton_client.iter_participants(channel, limit=None)]
    users_dto = TelegramUserMapper.get_users_from_telethon_raw_data(parsed_users)
    users_list = users_dto.get_model_dump_list()
    try:
        await User.on_conflict_do_update_users(session=db, users_dict_list=users_list)
    except Exception as e:
        await db.rollback()
        print(f"–û—à–∏–±–∫–∞: {e}")
        raise
    return await message.answer(f"–û–±–Ω–æ–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö", reply_markup=admin_tools_menu_kb())


@admin_router.callback_query(ModerateAd.filter())
async def handle_moderating_ads_data(callback_query: CallbackQuery, callback_data: ModerateAd, state: FSMContext,
                                     tg_user: User):
    """–ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if callback_data.action == ActionButtons.APPROVE.value.callback:
        await state.set_state(AdminModerateStates.approve)
        await state.update_data(ads_id=callback_data.ads_id)
        await callback_query.message.answer('–û–¥–æ–±—Ä–µ–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:',
                                            reply_markup=cancel_kb())
    if callback_data.action == ActionButtons.REJECT.value.callback:
        await state.set_state(AdminModerateStates.reject)
        await state.update_data(ads_id=callback_data.ads_id)
        await callback_query.message.answer(
            '–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É! –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –ø—Ä–∏—á–∏–Ω–µ –≤–æ–∑–≤—Ä–∞—Ç–∞:', reply_markup=cancel_kb()
        )
    if callback_data.action == ActionButtons.BANE.value.callback:
        await state.set_state(AdminModerateStates.bane)
        await state.update_data(author_id=callback_data.author_id)
        await callback_query.message.answer('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞:', reply_markup=cancel_kb())


@admin_router.message(AdminModerateStates.approve, F.text != ActionButtons.CANCEL.value.name)
async def ads_approve_state(
        message: Message, state: FSMContext, tg_user: User, cat_ads_service: CatAdsService
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    # –£–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —á–∞—Å—Ç–∏!
    comment = message.text
    data = await state.get_data()
    ads_id: int = data.get('ads_id')
    try:
        await cat_ads_service.moderate_ad_message(
            ads_id=ads_id, comment=comment, status=AdStatus.APPROVED
        )
    except Exception as e:
        logger.critical(
            '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é %s', e
        )
        return message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è! {e}')
    else:
        await state.clear()
        return await message.answer('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ!')


@admin_router.message(AdminModerateStates.reject, F.text != ActionButtons.CANCEL.value.name)
async def ads_reject_state(
        message: Message, state: FSMContext, tg_user: User, db: AsyncSession, cat_ads_service: CatAdsService
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –£–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —á–∞—Å—Ç–∏!
    comment = message.text
    data = await state.get_data()
    ads_id = data.get('ads_id')
    try:
        await cat_ads_service.moderate_ad_message(
            ads_id=ads_id, comment=comment, status=AdStatus.REJECTED
        )
    except Exception as e:
        logger.critical(
            '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è - –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é %s', e
        )
        return message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è! {e}')
    await state.clear()
    return await message.answer('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É!')


@admin_router.message(AdminModerateStates.bane, F.text != ActionButtons.CANCEL.value.name)
async def ads_bane_state(message: Message, state: FSMContext, tg_user: User, db: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –£–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —á–∞—Å—Ç–∏!
    comment = message.text
    data = await state.get_data()
    author_id = data.get('author_id')
    ads_id = data.get('ads_id')
    try:
        user = await User.one_or_none(session=db, id=author_id)
        if not user:
            raise ValueError(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: {author_id} –Ω–µ –Ω–∞–π–¥–µ–Ω! ')
        user.is_banned = True
        db.add(user)
        try:
            await db.execute(delete(CatAd).where(CatAd.id == ads_id))
        except Exception as e:
            raise ValueError('–ù–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}'.format(e))
        await db.flush()
    except Exception as e:
        logger.critical(
            '–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–Ω {}'.format(e)
        )
        await message.answer('–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–Ω {}'.format(e))
    else:
        try:
            await message.bot.send_message(chat_id=author_id, text=f'–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {comment}')
        except Exception as e:
            logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s', e)
            return await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω, –Ω–æ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å')
    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.')
    return await state.clear()
