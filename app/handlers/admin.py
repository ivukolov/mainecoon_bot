import typing as t
from logging import getLogger

from telethon import TelegramClient
from telethon import types
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.enums import ChatAction
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession

from keyboards.main_menu import blog_categories_kb, main_menu_kb

from database import Post
from keyboards.admin_menu import admin_tools_menu_kb
from keyboards.lexicon import MainMenu, KeyboardBlog, AdminMenu
from database.users.models import User
from utils.parsers import get_media_form_message
from utils.decorators import admin_required
from mappers.telegram import TelegramMessageMapper
from mappers.schemas import TelegramMessagesListDTO
from app.services.messages import MessagesService
from config import settings

admin_router = Router()

logger = getLogger(__name__)

@admin_router.message(F.text == MainMenu.ADMIN.value.name)
@admin_required
async def admin_menu(message: Message, tg_user: User):
    chat = await message.bot.get_chat(settings.CHANNEL_ID)
    members_count = await message.bot.get_chat_member_count(settings.CHANNEL_ID)
    response = (
        f"–û –≤–µ–ª–∏–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n "
        f"üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ: {members_count}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
        f"ID: {chat.id}\n"
        f"–¢–∏–ø: {chat.type}\n"
        f"Username: @{chat.username if chat.username else '–ù–µ—Ç'}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {chat.description[:100] + '...' if chat.description and len(chat.description) > 100 else chat.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )
    await message.answer(response, reply_markup=admin_tools_menu_kb())


@admin_router.message(F.text == AdminMenu.PARSE_POSTS)
@admin_required
async def admin_menu_parse_posts(message: Message, db: AsyncSession, teleton_client: TelegramClient, tg_user: User):
    channel = await teleton_client.get_entity(settings.CHANNEL_ID)
    await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    parsed_messages = [m async for m in teleton_client.iter_messages(
        channel,
        limit=None,
    )]
    service = MessagesService(session=db, messages=parsed_messages, is_aiogram=False)
    await service.service_and_save_messages()
    # if dto_list.error_count:
    #     not_added_messages = str(dto_list.get_error_messages_id())[:40] # –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–æ–∂–µ–Ω–∏–µ
    #     return await message.answer(
    #         f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—É—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã: {not_added_messages}",
    #         reply_markup=admin_tools_menu_kb()
    #     )
    # for parsed_message in parsed_messages:
    #     # print(parsed_message)
    #     data = TelegramMessageMapper.from_telethon_message(parsed_message)
    #     # print(data)
    return await message.answer(f"–í—Å–µ –ø–æ—Å—Ç—ã –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ!", reply_markup=admin_tools_menu_kb())

@admin_router.message(F.text == AdminMenu.ADD_NEW_POSTS)
@admin_required
async def admin_menu_add_new_posts(message: Message,db: AsyncSession, teleton_client: TelegramClient, tg_user: User):
    channel = await teleton_client.get_entity(settings.CHANNEL_ID) # –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    last_obj = await Post.get_last_post(db)
    # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!
    parsed_messages = [m async for m in teleton_client.iter_messages(
        channel,
        limit=None,
        min_id=last_obj.id + 1
    )]
    return await message.answer(f"–î–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –±–æ—Å—Å!", reply_markup=admin_tools_menu_kb())


@admin_router.message(F.text == AdminMenu.UPDATE_USERS)
@admin_required
async def admin_menu_add_new_posts(message: Message, db: AsyncSession, teleton_client: TelegramClient, tg_user: User):
    # –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    channel = await teleton_client.get_entity(-1003179370474)  # –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    chat = await teleton_client.get_permissions(channel, await teleton_client.get_me())
    if not chat.is_admin:
        print("‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã!")
        return await message.answer(
            f"‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö!",
            reply_markup=admin_tools_menu_kb()
        )
        return
    participants = await teleton_client.get_participants(channel)
    print(participants)
    return await message.answer(f"–û–±–Ω–æ–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö", reply_markup=admin_tools_menu_kb())