from logging import getLogger

import sqlalchemy as sa
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from pydantic import ValidationError
from sqlalchemy.ext.asyncio import AsyncSession

from config import settings
from keyboards.lexicon import MainMenu, CatGenders, AdsUserApprove
from keyboards import main_menu
from database import User
from utils.bot_utils import get_referral, check_user_subscribe, get_group_login
from handlers.ads.states import CatForm
from handlers.ads import keyboards as ads_kb
from handlers.ads.schema import CatData

logger = getLogger(__name__)
logger.info(f'–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä {__name__}')

ads_router = Router()

@ads_router.callback_query(ads_kb.ReferralCheck.filter())
async def ads_handle_referral_invite(
        callback_query: CallbackQuery, callback_data: ads_kb.ReferralCheck, db: AsyncSession, tg_user: User
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    bot = callback_query.message.bot
    if tg_user.id == callback_data.referral:
        return await callback_query.message.answer('–ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è')
    group_login = await get_group_login(bot)
    is_subscribe = await check_user_subscribe(bot=bot, user_id=tg_user.id)
    if is_subscribe:
        try:
            await tg_user.invite_user(referral=callback_data.referral, session=db)
        except sa.exc.IntegrityError:
            return await callback_query.message.answer('–ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å –∏–Ω–≤–∞–π—Ç –¥–≤–∞–∂–¥—ã')
        except Exception:
            return await callback_query.message.answer(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–∞–Ω–∞–ª–∞'
            )
        return await callback_query.message.answer(
            f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ! {group_login}"
        )
    return await callback_query.message.answer(f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—É {group_login}")


@ads_router.callback_query(F.data == ads_kb.AdsMenu.GET_REFERRAL.value.callback)
async def ads_referral_btn(callback_query: CallbackQuery, db: AsyncSession, tg_user: User):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    bot = callback_query.message.bot
    bot_about = await bot.get_me()
    referral = get_referral(user_id=tg_user.id, bot_name=bot_about.username)
    return await callback_query.message.answer(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ {referral}")


@ads_router.callback_query(F.data == ads_kb.AdsMenu.DONATE.value.callback)
async def ads_donate_btn(callback_query: CallbackQuery, db: AsyncSession, tg_user: User):
    """–î–æ–Ω–∞—Ç"""
    return await callback_query.message.answer(f"–°–ø–∞—Å–∏–±–æ —á—Ç–æ —Ä–µ—à–∏–ª–∏ –Ω–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å! ")


@ads_router.message(F.text == MainMenu.ADS.value.name)
async def ads_menu(message: Message, db: AsyncSession, tg_user: User,  state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    users_count = await tg_user.get_invited_users_cnt(session=db)
    if users_count >= 0:
        await state.set_state(CatForm.name)
        return await message.answer(
            f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í–∞—Å, –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {settings.USERS_CNT} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, '
            f'–ø–æ—Ä–∞ –∑–∞–±—Ä–∞—Ç—å –≤–∞—à—É –Ω–∞–≥—Ä–∞–¥—É! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: '
            f'\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—Ç–∏–∫–∞:', reply_markup=main_menu.cancel_kb()
        )
    return await message.answer(
        f"–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å "
        f"{settings.DONATION_AMOUNT} —Ä—É–±. –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å {settings.USERS_CNT} "
        f"–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. –¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {users_count}",
        reply_markup=ads_kb.ads_publisher_kb()
    )

@ads_router.message(CatForm.name)
async def ads_process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    try:
        name = CatData(name=message.text)
    except ValueError:
        return await message.answer(
            f'–ú–∞–∫—Å –¥–ª–∏–Ω–Ω–∞: {settings.CAT_NAME_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤'
        )
    await state.update_data(name=message.text)
    await state.set_state(CatForm.gender)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–æ—Ç–∏–∫–∞:", reply_markup=ads_kb.ads_cat_gender_kb())

@ads_router.message(CatForm.gender)
async def ads_process_gender(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞"""
    cat_genders: set = CatGenders.get_values()
    if message.text in cat_genders:
        gender = CatData(gender=message.text)
        await state.update_data(gender=gender.gender)
        await state.set_state(CatForm.birth_date)
        return await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {settings.CAT_BIRTH_DATE_INFO}:",
            reply_markup=main_menu.cancel_kb()
        )
    return await message.answer(
        "–î–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –∫–æ—Ç–∏–∫–∞ - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏", reply_markup=ads_kb.ads_cat_gender_kb()
    )

@ads_router.message(CatForm.birth_date)
async def ads_process_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        cat_data = CatData(birth_date=message.text)
    except ValueError as e:
        return await message.answer(
            f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å: {settings.CAT_BIRTH_DATE_INFO}:'
        )
    await state.update_data(birth_date=cat_data.birth_date)
    await state.set_state(CatForm.color)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–∫—Ä–∞—Å –∫–æ—Ç–∏–∫–∞:", reply_markup=main_menu.cancel_kb())

@ads_router.message(CatForm.color)
async def ads_process_color(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫—Ä–∞—Å–∞"""
    try:
        cat_data = CatData(color=message.text)
    except ValueError:
        return await message.answer(
            f'–ú–∞–∫—Å –¥–ª–∏–Ω–Ω–∞: {settings.CAT_COLOR_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤'
        )

    await state.update_data(color=cat_data.color)
    await state.set_state(CatForm.cattery)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ç–æ–º–Ω–∏–∫–∞:", reply_markup=main_menu.cancel_kb())

@ads_router.message(CatForm.cattery)
async def ads_process_cattery(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Ç–æ–º–Ω–∏–∫–∞"""
    try:
        cat_data = CatData(cattery=message.text)
    except ValueError:
        return await message.answer(
            f'–ú–∞–∫—Å –¥–ª–∏–Ω–Ω–∞: {settings.CAT_CATTERY_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤'
        )
    await state.update_data(cattery=cat_data.cattery)
    await state.set_state(CatForm.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫–æ—Ç–∏–∫–∞:", reply_markup=main_menu.cancel_kb())

@ads_router.message(CatForm.price)
async def process_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã"""
    try:
        cat_data = CatData(price=message.text)
    except ValueError as e:
        return await message.answer(
            f'–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º'
        )
    await state.update_data(price=message.text)
    await state.set_state(CatForm.contacts)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", reply_markup=main_menu.cancel_kb())

@ads_router.message(CatForm.contacts)
async def ads_process_contacts(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    try:
        cat_data = CatData(contacts=message.text)
    except ValueError as e:
        return await message.answer(
            f'–ú–∏–Ω –¥–ª–∏–Ω–Ω–∞:  {settings.CAT_CONTACTS_MIN_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤'
        )
    await state.update_data(contacts=message.text)
    await state.set_state(CatForm.photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞:", reply_markup=main_menu.cancel_kb())

@ads_router.message(CatForm.photo, F.photo)
async def ads_process_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    cat_data = CatData(photo_id=photo_id)
    await state.update_data(photo_id=cat_data.photo_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_text = (
        "‚úÖ –†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç \n\n"
        f"üê± –ò–º—è: {data['name']}\n"
        f"‚öß –ü–æ–ª: {data['gender']}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_date']}\n"
        f"üé® –û–∫—Ä–∞—Å: {data['color']}\n"
        f"üè† –ü–∏—Ç–æ–º–Ω–∏–∫: {data['cattery']}\n"
        f"üí∞ –¶–µ–Ω–∞: {data['price']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data['contacts']}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    await message.answer_photo(
        data['photo_id'],
        caption=result_text,
        reply_markup=ads_kb.ads_cat_send_to_moderate_kb()
    )
    await state.set_state(CatForm.approve)
    await state.update_data(result_text=result_text)

@ads_router.message(CatForm.approve)
async def ads_approve_(message: Message, state: FSMContext, tg_user: User,):
    data = await state.get_data()
    print(type(data['birth_date']))
    if message.text == AdsUserApprove.TO_MODERATE.value.name:
        await message.answer(
            '–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é',
            reply_markup = main_menu.main_menu_kb()
        )
        await message.answer_photo(
            data['photo_id'],
            caption=data['result_text'],

        )
    elif message.text == AdsUserApprove.REPEAT.value.name:
        await state.set_state(CatForm.name)
        await message.answer(
            '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—Ç–∞',
            reply_markup=main_menu.cancel_kb()
        )