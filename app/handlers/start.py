from logging import getLogger

from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession

from utils.parsers import get_hashtags_from_channel
from keyboards.main_menu import blog_categories_kb, main_menu_kb
from keyboards.lexicon import MainMenu
from database.users.models import User
from config import settings

command_start_router = Router()

logger = getLogger(__name__)

@command_start_router.message(CommandStart())
async def cmd_start(message: Message, db: AsyncSession, bot: Bot):
    user, created = await User.get_or_create(db, id=message.from_user.id)
    if user.is_admin():
        chat = await bot.get_chat(settings.CHANNEL_ID)
        members_count = await bot.get_chat_member_count(settings.CHANNEL_ID)
        response = (
            f"–û –≤–µ–ª–∏–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n "
            f"üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ: {members_count}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
            f"ID: {chat.id}\n"
            f"–¢–∏–ø: {chat.type}\n"
            f"Username: @{chat.username if chat.username else '–ù–µ—Ç'}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {chat.description[:100] + '...' if chat.description and len(chat.description) > 100 else chat.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
        )
        return await message.answer(response)
    return await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç {user.id if not created else '–ö–æ—Ç–∞–Ω'}! –Ø ‚Äî –±–æ—Ç –∫–∞–Ω–∞–ª–∞ ¬´–ú–µ–π–Ω-–∫—É–Ω—ã –≤ –í–æ—Ä–æ–Ω–µ–∂–µ¬ª.\n\n",
        reply_markup=main_menu_kb()
    )

@command_start_router.message(F.text == MainMenu.BLOG)
async def blog_menu(message: Message, bot: Bot , db: AsyncSession):
    hashtags = await get_hashtags_from_channel(bot=bot, message_limit=100)
    await message.answer(f"–°–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤ {hashtags}", reply_markup=blog_categories_kb())